// Lab14 TextParseDotMat.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <conio.h>
#include <process.h>
#include "c:\LccMetalBox\LccIo.cpp"
#define Max_Len 150
#define IP_Len 14
#define DC_Max_len_line 80
#define DC_SLEEP 500

void recvThread(void *);
int Parse_CommandLine(char*, int*, int*, int*);
void initializeppi(void);
void Zero(void);
void One(void);
void Two(void);
void Three(void);
void Four(void);
void Five(void);
void Six(void);
void Seven(void);
void Eight(void);
void Nine(void);
void A(void);
void B(void);
void C(void);
void D(void);
void E(void);
void F(void);
void ClearDisplay(void);


int main()
{
	char Choice[Max_Len];
	char Input[Max_Len];
	char IP[IP_Len];
	int Def = 1;
	fseek(stdin, 0, 0);
	initializeppi();

	_beginthread(recvThread, 0, NULL);

	while (1)
	{
		printf("1) Enter Target IP address\n");
		printf("2) Enter Text message to send\n");
		printf("3) Send Text message\n");
		printf("4) Exit\n");
		gets_s(Choice);
		if (strstr(Choice, "1") != NULL)
		{
			printf("Please enter Target IP Address\n");
			gets_s(IP);
			LccOutportString(0x2300, IP);
			LccOutport(0x2500, Def);
		}
		if (strstr(Choice, "2") != NULL)
		{
			printf("Enter a message no longer than 150 characters\n");
			gets_s(Input);
			LccOutportString(0x2600, Input);
		}
		if (strstr(Choice, "3") != NULL)
		{
			LccOutport(0x2700, Def);
		}
		if (strstr(Choice, "4") != NULL)
		{
			break;
		}
	}
}

void recvThread(void *)
{
	char txt_in[Max_Len];
	int led_8_bit = 0;
	int led_16_bit = 0;
	int led_32_bit = 0;
	int exit = 0;

	while (1)
	{
		if (LccInport(0x2800) == 1)
		{
			printf("Text Recieved\n");
			LccInportString(0x2900, txt_in);
			printf("%s\n", txt_in);
			exit = Parse_CommandLine(txt_in, &led_8_bit, &led_16_bit, &led_32_bit);
		}
	}
}
int Parse_CommandLine(char* txt_in, int* pled_8_bit, int* pled_16_bit, int* pled_32_bit)
{
	int exit = 0;
	if (strstr(txt_in, "WRITE_0") != NULL)
	{
		ClearDisplay();
		Zero();
	}
	if (strstr(txt_in, "WRITE_1") != NULL)
	{
		ClearDisplay();
		One();
	}
	if (strstr(txt_in, "WRITE_2") != NULL)
	{
		ClearDisplay();
		Two();
	}
	if (strstr(txt_in, "WRITE_3") != NULL)
	{
		ClearDisplay();
		Three();
	}
	if (strstr(txt_in, "WRITE_4") != NULL)
	{
		ClearDisplay();
		Four();
	}
	if (strstr(txt_in, "WRITE_5") != NULL)
	{
		ClearDisplay();
		Five();
	}
	if (strstr(txt_in, "WRITE_6") != NULL)
	{
		ClearDisplay();
		Six();
	}
	if (strstr(txt_in, "WRITE_7") != NULL)
	{
		ClearDisplay();
		Seven();
	}
	if (strstr(txt_in, "WRITE_8") != NULL)
	{
		ClearDisplay();
		Eight();
	}
	if (strstr(txt_in, "WRITE_9") != NULL)
	{
		ClearDisplay();
		Nine();
	}
	if (strstr(txt_in, "WRITE_A") != NULL)
	{
		ClearDisplay();
		A();
	}
	if (strstr(txt_in, "WRITE_B") != NULL)
	{
		ClearDisplay();
		B();
	}
	if (strstr(txt_in, "WRITE_C") != NULL)
	{
		ClearDisplay();
		C();
	}
	if (strstr(txt_in, "WRITE_D") != NULL)
	{
		ClearDisplay();
		D();
	}
	if (strstr(txt_in, "WRITE_E") != NULL)
	{
		ClearDisplay();
		E();
	}
	if (strstr(txt_in, "WRITE_F") != NULL)
	{
		ClearDisplay();
		F();
	}
	if (strstr(txt_in, "CLEAR") != NULL)
	{
		ClearDisplay();
	}
	if (strstr(txt_in, "8_BIT_LED_0_ON") != NULL)
	{
		*pled_8_bit = *pled_8_bit | 0x01;
		LccOutport(0x0300, ~*pled_8_bit);//write LED's
	}
	if (strstr(txt_in, "8_BIT_LED_0_OFF") != NULL)
	{
		*pled_8_bit = *pled_8_bit &~0x01;
		LccOutport(0x0300, ~*pled_8_bit);//write LED's
	}
	if (strstr(txt_in, "8_BIT_LED_1_ON") != NULL)
	{
		*pled_8_bit = *pled_8_bit | 0x02;
		LccOutport(0x0300, ~*pled_8_bit);//write LED's
	}
	if (strstr(txt_in, "8_BIT_LED_1_OFF") != NULL)
	{
		*pled_8_bit = *pled_8_bit &~0x02;
		LccOutport(0x0300, ~*pled_8_bit);//write LED'
	}
	if (strstr(txt_in, "8_BIT_LED_2_OFF") != NULL)
	{
		*pled_8_bit = *pled_8_bit &~0x04;
		LccOutport(0x0300, ~*pled_8_bit);//write LED'
	}
	if (strstr(txt_in, "8_BIT_LED_2_ON") != NULL)
	{
		*pled_8_bit = *pled_8_bit | 0x04;
		LccOutport(0x0300, ~*pled_8_bit);//write LED's
	}
	if (strstr(txt_in, "8_BIT_LED_3_ON") != NULL)
	{
		*pled_8_bit = *pled_8_bit | 0x08;
		LccOutport(0x0300, ~*pled_8_bit);//write LED's
	}
	if (strstr(txt_in, "8_BIT_LED_3_OFF") != NULL)
	{
		*pled_8_bit = *pled_8_bit &~0x08;
		LccOutport(0x0300, ~*pled_8_bit);//write LED'
	}
	if (strstr(txt_in, "8_BIT_LED_4_ON") != NULL)
	{
		*pled_8_bit = *pled_8_bit | 0x10;
		LccOutport(0x0300, ~*pled_8_bit);//write LED's
	}
	if (strstr(txt_in, "8_BIT_LED_4_OFF") != NULL)
	{
		*pled_8_bit = *pled_8_bit &~0x10;
		LccOutport(0x0300, ~*pled_8_bit);//write LED'
	}
	if (strstr(txt_in, "8_BIT_LED_5_ON") != NULL)
	{
		*pled_8_bit = *pled_8_bit | 0x20;
		LccOutport(0x0300, ~*pled_8_bit);//write LED's
	}
	if (strstr(txt_in, "8_BIT_LED_5_OFF") != NULL)
	{
		*pled_8_bit = *pled_8_bit &~0x20;
		LccOutport(0x0300, ~*pled_8_bit);//write LED'
	}
	if (strstr(txt_in, "8_BIT_LED_6_ON") != NULL)
	{
		*pled_8_bit = *pled_8_bit | 0x40;
		LccOutport(0x0300, ~*pled_8_bit);//write LED's
	}
	if (strstr(txt_in, "8_BIT_LED_6_OFF") != NULL)
	{
		*pled_8_bit = *pled_8_bit &~0x40;
		LccOutport(0x0300, ~*pled_8_bit);//write LED'
	}
	if (strstr(txt_in, "8_BIT_LED_7_ON") != NULL)
	{
		*pled_8_bit = *pled_8_bit | 0x80;
		LccOutport(0x0300, ~*pled_8_bit);//write LED's
	}
	if (strstr(txt_in, "8_BIT_LED_7_OFF") != NULL)
	{
		*pled_8_bit = *pled_8_bit &~0x80;
		LccOutport(0x0300, ~*pled_8_bit);//write LED'
	}
	if (strstr(txt_in, "16_BIT_LED_0_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0001;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_0_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0001;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_1_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0002;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_1_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0002;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_2_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0004;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_2_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0004;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_3_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0008;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_3_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0008;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_4_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0010;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_4_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0010;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_5_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0020;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_5_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0020;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_6_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0040;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_6_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0040;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_7_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0080;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_7_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0080;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_8_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0100;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_8_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0100;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_9_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0200;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_9_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0200;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_10_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0400;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_10_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0400;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_11_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x0800;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_11_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x0800;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_12_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x1000;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_12_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x1000;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}if (strstr(txt_in, "16_BIT_LED_13_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x2000;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_13_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x2000;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_14_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x4000;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_14_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x4000;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_15_ON") != NULL)
	{
		*pled_16_bit = *pled_16_bit | 0x8000;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "16_BIT_LED_15_OFF") != NULL)
	{
		*pled_16_bit = *pled_16_bit &~0x8000;
		LccOutport(0x1300, *pled_16_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_0_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000001;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_0_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000001;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_1_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000002;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_1_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000002;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_2_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000004;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_2_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000004;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_3_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000008;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_3_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000008;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_4_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000010;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_4_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000010;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_5_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000020;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_5_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000020;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_6_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000040;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_6_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000040;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_7_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000080;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_7_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000080;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_8_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000100;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_8_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000100;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_9_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000200;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_9_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000200;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_10_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000400;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_10_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000400;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_11_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000000800;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_11_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000000800;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_12_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000001000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_12_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000001000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_13_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000002000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_13_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000002000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_14_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000004000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_14_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000004000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_15_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000008000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_15_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000008000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_16_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000010000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_16_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000010000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_17_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000020000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_17_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000020000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_18_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000040000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_18_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000040000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_19_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000080000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_19_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000080000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_20_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000100000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_20_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000100000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_21_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000200000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_21_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000200000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_22_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000400000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_22_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000400000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_23_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000000800000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_23_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000000800000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_24_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000001000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_24_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000001000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_25_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000002000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_25_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000002000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_26_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000004000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_26_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000004000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_27_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x0000000008000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_27_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000008000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_28_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x000000010000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_28_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000010000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_29_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x000000020000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_29_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000020000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_30_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x000000040000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_30_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000040000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_31_ON") != NULL)
	{
		*pled_32_bit = *pled_32_bit | 0x000000080000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "32_BIT_LED_31_OFF") != NULL)
	{
		*pled_32_bit = *pled_32_bit &~0x0000000080000000;
		LccOutport(0x1302, *pled_32_bit);//write 16 bit Digital outputs
	}
	if (strstr(txt_in, "EXIT") != NULL)
	{
		exit = 1;
	}
	return exit;
}
void initializeppi(void)
{
	//initialize metal box
	LccOutport(0x0303, 0x88);
	LccOutport(0x0307, 0x92);
}
void Zero(void)
{
	LccOutport(0x4602, 1);
	LccOutport(0x4603, 1);
	LccOutport(0x4701, 1);
	LccOutport(0x4704, 1);
	LccOutport(0x4801, 1);
	LccOutport(0x4901, 1);
	LccOutport(0x4A01, 1);
	LccOutport(0x4B01, 1);
	LccOutport(0x4C01, 1);
	LccOutport(0x4D01, 1);
	LccOutport(0x4E02, 1);
	LccOutport(0x4E03, 1);
	LccOutport(0x4804, 1);
	LccOutport(0x4904, 1);
	LccOutport(0x4A04, 1);
	LccOutport(0x4B04, 1);
	LccOutport(0x4C04, 1);
	LccOutport(0x4D04, 1);
}
void One(void)
{
	LccOutport(0x4101, 1);
	LccOutport(0x4201, 1);
	LccOutport(0x4301, 1);
	LccOutport(0x4401, 1);
	LccOutport(0x4501, 1);
	LccOutport(0x4601, 1);
	LccOutport(0x4701, 1);
	LccOutport(0x4801, 1);
	LccOutport(0x4901, 1);
	LccOutport(0x4300, 1);
	LccOutport(0x4900, 1);
	LccOutport(0x4902, 1);
}
void Two(void)
{
	LccOutport(0x4103, 1);
	LccOutport(0x4104, 1);
	LccOutport(0x4105, 1);
	LccOutport(0x4203, 1);
	LccOutport(0x4503, 1);
	LccOutport(0x4603, 1);
	LccOutport(0x4703, 1);
	LccOutport(0x4404, 1);
	LccOutport(0x4704, 1);
	LccOutport(0x4705, 1);
	LccOutport(0x4305, 1);
	LccOutport(0x4205, 1);
}
void Three(void)
{
	LccOutport(0x4106, 1);
	LccOutport(0x4107, 1);
	LccOutport(0x4108, 1);
	LccOutport(0x4109, 1);
	LccOutport(0x4209, 1);
	LccOutport(0x4309, 1);
	LccOutport(0x4408, 1);
	LccOutport(0x4409, 1);
	LccOutport(0x4509, 1);
	LccOutport(0x4609, 1);
	LccOutport(0x4709, 1);
	LccOutport(0x4706, 1);
	LccOutport(0x4707, 1);
	LccOutport(0x4708, 1);
}
void Four(void)
{
	LccOutport(0x4602, 1);
	LccOutport(0x4702, 1);
	LccOutport(0x4802, 1);
	LccOutport(0x4902, 1);
	LccOutport(0x4903, 1);
	LccOutport(0x4604, 1);
	LccOutport(0x4704, 1);
	LccOutport(0x4804, 1);
	LccOutport(0x4904, 1);
	LccOutport(0x4A04, 1);
	LccOutport(0x4B04, 1);
	LccOutport(0x4C04, 1);
	LccOutport(0x4D04, 1);
}
void Five(void)
{
	LccOutport(0x4606, 1);
	LccOutport(0x4706, 1);
	LccOutport(0x4806, 1);
	LccOutport(0x4906, 1);
	LccOutport(0x4D06, 1);
	LccOutport(0x4607, 1);
	LccOutport(0x4A07, 1);
	LccOutport(0x4D07, 1);
	LccOutport(0x4608, 1);
	LccOutport(0x4B08, 1);
	LccOutport(0x4C08, 1);
}
void Six(void)
{
	LccOutport(0x5201, 1);
	LccOutport(0x5301, 1);
	LccOutport(0x5401, 1);
	LccOutport(0x5501, 1);
	LccOutport(0x5601, 1);
	LccOutport(0x5701, 1);
	LccOutport(0x5801, 1);
	LccOutport(0x5901, 1);
	LccOutport(0x5202, 1);
	LccOutport(0x5702, 1);
	LccOutport(0x5902, 1);
	LccOutport(0x5203, 1);
	LccOutport(0x5703, 1);
	LccOutport(0x5803, 1);
	LccOutport(0x5903, 1);
}
void Seven(void)
{
	LccOutport(0x5303, 1);
	LccOutport(0x5304, 1);
	LccOutport(0x5305, 1);
	LccOutport(0x5306, 1);
	LccOutport(0x5406, 1);
	LccOutport(0x5505, 1);
	LccOutport(0x5604, 1);
	LccOutport(0x5704, 1);
	LccOutport(0x5804, 1);
	LccOutport(0x5904, 1);
	LccOutport(0x5A04, 1);
}
void Eight(void)
{
	LccOutport(0x5906, 1);
	LccOutport(0x5A06, 1);
	LccOutport(0x5B06, 1);
	LccOutport(0x5C06, 1);
	LccOutport(0x5D06, 1);
	LccOutport(0x5E06, 1);
	LccOutport(0x5F06, 1);
	LccOutport(0x6006, 1);
	LccOutport(0x5907, 1);
	LccOutport(0x5908, 1);
	LccOutport(0x5909, 1);
	LccOutport(0x5D07, 1);
	LccOutport(0x5D08, 1);
	LccOutport(0x6007, 1);
	LccOutport(0x6008, 1);
	LccOutport(0x6009, 1);
	LccOutport(0x5A09, 1);
	LccOutport(0x5B09, 1);
	LccOutport(0x5C09, 1);
	LccOutport(0x5D09, 1);
	LccOutport(0x5E09, 1);
	LccOutport(0x5F09, 1);
}
void Nine(void)
{
	LccOutport(0x5E01, 1);
	LccOutport(0x5F01, 1);
	LccOutport(0x6001, 1);
	LccOutport(0x6101, 1);
	LccOutport(0x5E02, 1);
	LccOutport(0x6102, 1);
	LccOutport(0x5E03, 1);
	LccOutport(0x5F03, 1);
	LccOutport(0x6003, 1);
	LccOutport(0x6103, 1);
	LccOutport(0x6203, 1);
	LccOutport(0x6303, 1);
	LccOutport(0x6403, 1);
	LccOutport(0x6503, 1);
}
void A(void)
{
	LccOutport(0x4104, 1);
	LccOutport(0x4105, 1);
	LccOutport(0x4203, 1);
	LccOutport(0x4303, 1);
	LccOutport(0x4403, 1);
	LccOutport(0x4503, 1);
	LccOutport(0x4603, 1);
	LccOutport(0x4404, 1);
	LccOutport(0x4405, 1);
	LccOutport(0x4206, 1);
	LccOutport(0x4306, 1);
	LccOutport(0x4406, 1);
	LccOutport(0x4506, 1);
	LccOutport(0x4606, 1);
}
void B(void)
{
	LccOutport(0x4800, 1);
	LccOutport(0x4900, 1);
	LccOutport(0x4A00, 1);
	LccOutport(0x4B00, 1);
	LccOutport(0x4C00, 1);
	LccOutport(0x4D00, 1);
	LccOutport(0x4E00, 1);
	LccOutport(0x4801, 1);
	LccOutport(0x4A01, 1);
	LccOutport(0x4E01, 1);
	LccOutport(0x4902, 1);
	LccOutport(0x4B02, 1);
	LccOutport(0x4C02, 1);
	LccOutport(0x4D02, 1);
}
void C(void)
{
	LccOutport(0x4C03, 1);
	LccOutport(0x4D03, 1);
	LccOutport(0x4E03, 1);
	LccOutport(0x4F03, 1);
	LccOutport(0x5003, 1);
	LccOutport(0x5103, 1);
	LccOutport(0x4C04, 1);
	LccOutport(0x4C05, 1);
	LccOutport(0x5104, 1);
	LccOutport(0x5105, 1);
}
void D(void)
{
	LccOutport(0x4A07, 1);
	LccOutport(0x4B07, 1);
	LccOutport(0x4C07, 1);
	LccOutport(0x4D07, 1);
	LccOutport(0x4E07, 1);
	LccOutport(0x4F07, 1);
	LccOutport(0x5007, 1);
	LccOutport(0x4A08, 1);
	LccOutport(0x4B09, 1);
	LccOutport(0x4C09, 1);
	LccOutport(0x4D09, 1);
	LccOutport(0x4E09, 1);
	LccOutport(0x4F09, 1);
	LccOutport(0x5008, 1);
}
void E(void)
{
	LccOutport(0x5301, 1);
	LccOutport(0x5401, 1);
	LccOutport(0x5501, 1);
	LccOutport(0x5601, 1);
	LccOutport(0x5701, 1);
	LccOutport(0x5801, 1);
	LccOutport(0x5901, 1);
	LccOutport(0x5A01, 1);
	LccOutport(0x5302, 1);
	LccOutport(0x5303, 1);
	LccOutport(0x5304, 1);
	LccOutport(0x5602, 1);
	LccOutport(0x5603, 1);
	LccOutport(0x5A02, 1);
	LccOutport(0x5A03, 1);
	LccOutport(0x5A04, 1);
}
void F(void)
{
	LccOutport(0x5706, 1);
	LccOutport(0x5806, 1);
	LccOutport(0x5906, 1);
	LccOutport(0x5A06, 1);
	LccOutport(0x5B06, 1);
	LccOutport(0x5C06, 1);
	LccOutport(0x5D06, 1);
	LccOutport(0x5E06, 1);
	LccOutport(0x5F06, 1);
	LccOutport(0x5707, 1);
	LccOutport(0x5708, 1);
	LccOutport(0x5A07, 1);
}
void ClearDisplay()
{
	LccOutport(0x4602, 0);
	LccOutport(0x4603, 0);
	LccOutport(0x4701, 0);
	LccOutport(0x4704, 0);
	LccOutport(0x4801, 0);
	LccOutport(0x4901, 0);
	LccOutport(0x4A01, 0);
	LccOutport(0x4B01, 0);
	LccOutport(0x4C01, 0);
	LccOutport(0x4D01, 0);
	LccOutport(0x4E02, 0);
	LccOutport(0x4E03, 0);
	LccOutport(0x4804, 0);
	LccOutport(0x4904, 0);
	LccOutport(0x4A04, 0);
	LccOutport(0x4B04, 0);
	LccOutport(0x4C04, 0);
	LccOutport(0x4D04, 0);
	LccOutport(0x4101, 0);
	LccOutport(0x4201, 0);
	LccOutport(0x4301, 0);
	LccOutport(0x4401, 0);
	LccOutport(0x4501, 0);
	LccOutport(0x4601, 0);
	LccOutport(0x4701, 0);
	LccOutport(0x4801, 0);
	LccOutport(0x4901, 0);
	LccOutport(0x4300, 0);
	LccOutport(0x4900, 0);
	LccOutport(0x4902, 0);
	LccOutport(0x4103, 0);
	LccOutport(0x4104, 0);
	LccOutport(0x4105, 0);
	LccOutport(0x4203, 0);
	LccOutport(0x4503, 0);
	LccOutport(0x4603, 0);
	LccOutport(0x4703, 0);
	LccOutport(0x4404, 0);
	LccOutport(0x4704, 0);
	LccOutport(0x4705, 0);
	LccOutport(0x4305, 0);
	LccOutport(0x4205, 0);
	LccOutport(0x4106, 0);
	LccOutport(0x4107, 0);
	LccOutport(0x4108, 0);
	LccOutport(0x4109, 0);
	LccOutport(0x4209, 0);
	LccOutport(0x4309, 0);
	LccOutport(0x4408, 0);
	LccOutport(0x4409, 0);
	LccOutport(0x4509, 0);
	LccOutport(0x4609, 0);
	LccOutport(0x4709, 0);
	LccOutport(0x4706, 0);
	LccOutport(0x4707, 0);
	LccOutport(0x4708, 0);
	LccOutport(0x4602, 0);
	LccOutport(0x4702, 0);
	LccOutport(0x4802, 0);
	LccOutport(0x4902, 0);
	LccOutport(0x4903, 0);
	LccOutport(0x4604, 0);
	LccOutport(0x4704, 0);
	LccOutport(0x4804, 0);
	LccOutport(0x4904, 0);
	LccOutport(0x4A04, 0);
	LccOutport(0x4B04, 0);
	LccOutport(0x4C04, 0);
	LccOutport(0x4D04, 0);
	LccOutport(0x4606, 0);
	LccOutport(0x4706, 0);
	LccOutport(0x4806, 0);
	LccOutport(0x4906, 0);
	LccOutport(0x4D06, 0);
	LccOutport(0x4607, 0);
	LccOutport(0x4A07, 0);
	LccOutport(0x4D07, 0);
	LccOutport(0x4608, 0);
	LccOutport(0x4B08, 0);
	LccOutport(0x4C08, 0);
	LccOutport(0x5201, 0);
	LccOutport(0x5301, 0);
	LccOutport(0x5401, 0);
	LccOutport(0x5501, 0);
	LccOutport(0x5601, 0);
	LccOutport(0x5701, 0);
	LccOutport(0x5801, 0);
	LccOutport(0x5901, 0);
	LccOutport(0x5202, 0);
	LccOutport(0x5702, 0);
	LccOutport(0x5902, 0);
	LccOutport(0x5203, 0);
	LccOutport(0x5703, 0);
	LccOutport(0x5803, 0);
	LccOutport(0x5903, 0);
	LccOutport(0x5303, 0);
	LccOutport(0x5304, 0);
	LccOutport(0x5305, 0);
	LccOutport(0x5306, 0);
	LccOutport(0x5406, 0);
	LccOutport(0x5505, 0);
	LccOutport(0x5604, 0);
	LccOutport(0x5704, 0);
	LccOutport(0x5804, 0);
	LccOutport(0x5904, 0);
	LccOutport(0x5A04, 0);
	LccOutport(0x5906, 0);
	LccOutport(0x5A06, 0);
	LccOutport(0x5B06, 0);
	LccOutport(0x5C06, 0);
	LccOutport(0x5D06, 0);
	LccOutport(0x5E06, 0);
	LccOutport(0x5F06, 0);
	LccOutport(0x6006, 0);
	LccOutport(0x5907, 0);
	LccOutport(0x5908, 0);
	LccOutport(0x5909, 0);
	LccOutport(0x5D07, 0);
	LccOutport(0x5D08, 0);
	LccOutport(0x6007, 0);
	LccOutport(0x6008, 0);
	LccOutport(0x6009, 0);
	LccOutport(0x5A09, 0);
	LccOutport(0x5B09, 0);
	LccOutport(0x5C09, 0);
	LccOutport(0x5D09, 0);
	LccOutport(0x5E09, 0);
	LccOutport(0x5F09, 0);
	LccOutport(0x5E01, 0);
	LccOutport(0x5F01, 0);
	LccOutport(0x6001, 0);
	LccOutport(0x6101, 0);
	LccOutport(0x5E02, 0);
	LccOutport(0x6102, 0);
	LccOutport(0x5E03, 0);
	LccOutport(0x5F03, 0);
	LccOutport(0x6003, 0);
	LccOutport(0x6103, 0);
	LccOutport(0x6203, 0);
	LccOutport(0x6303, 0);
	LccOutport(0x6403, 0);
	LccOutport(0x6503, 0);
	LccOutport(0x4104, 0);
	LccOutport(0x4105, 0);
	LccOutport(0x4203, 0);
	LccOutport(0x4303, 0);
	LccOutport(0x4403, 0);
	LccOutport(0x4503, 0);
	LccOutport(0x4603, 0);
	LccOutport(0x4404, 0);
	LccOutport(0x4405, 0);
	LccOutport(0x4206, 0);
	LccOutport(0x4306, 0);
	LccOutport(0x4406, 0);
	LccOutport(0x4506, 0);
	LccOutport(0x4606, 0);
	LccOutport(0x4800, 0);
	LccOutport(0x4900, 0);
	LccOutport(0x4A00, 0);
	LccOutport(0x4B00, 0);
	LccOutport(0x4C00, 0);
	LccOutport(0x4D00, 0);
	LccOutport(0x4E00, 0);
	LccOutport(0x4801, 0);
	LccOutport(0x4A01, 0);
	LccOutport(0x4E01, 0);
	LccOutport(0x4902, 0);
	LccOutport(0x4B02, 0);
	LccOutport(0x4C02, 0);
	LccOutport(0x4D02, 0);
	LccOutport(0x4C03, 0);
	LccOutport(0x4D03, 0);
	LccOutport(0x4E03, 0);
	LccOutport(0x4F03, 0);
	LccOutport(0x5003, 0);
	LccOutport(0x5103, 0);
	LccOutport(0x4C04, 0);
	LccOutport(0x4C05, 0);
	LccOutport(0x5104, 0);
	LccOutport(0x5105, 0);
	LccOutport(0x4A07, 0);
	LccOutport(0x4B07, 0);
	LccOutport(0x4C07, 0);
	LccOutport(0x4D07, 0);
	LccOutport(0x4E07, 0);
	LccOutport(0x4F07, 0);
	LccOutport(0x5007, 0);
	LccOutport(0x4A08, 0);
	LccOutport(0x4B09, 0);
	LccOutport(0x4C09, 0);
	LccOutport(0x4D09, 0);
	LccOutport(0x4E09, 0);
	LccOutport(0x4F09, 0);
	LccOutport(0x5301, 0);
	LccOutport(0x5401, 0);
	LccOutport(0x5501, 0);
	LccOutport(0x5601, 0);
	LccOutport(0x5701, 0);
	LccOutport(0x5801, 0);
	LccOutport(0x5901, 0);
	LccOutport(0x5A01, 0);
	LccOutport(0x5302, 0);
	LccOutport(0x5303, 0);
	LccOutport(0x5304, 0);
	LccOutport(0x5602, 0);
	LccOutport(0x5603, 0);
	LccOutport(0x5A02, 0);
	LccOutport(0x5A03, 0);
	LccOutport(0x5A04, 0);
	LccOutport(0x5706, 0);
	LccOutport(0x5806, 0);
	LccOutport(0x5906, 0);
	LccOutport(0x5A06, 0);
	LccOutport(0x5B06, 0);
	LccOutport(0x5C06, 0);
	LccOutport(0x5D06, 0);
	LccOutport(0x5E06, 0);
	LccOutport(0x5F06, 0);
	LccOutport(0x5707, 0);
	LccOutport(0x5708, 0);
	LccOutport(0x5008, 0);
	LccOutport(0x5A07, 0);
}
